// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "proto/BuildInfoPB.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace molecular_dynamics {
namespace oligosaccharide_builder {

namespace {

const ::google::protobuf::Descriptor* BuildInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuildInfo_Linkage_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuildInfo_Linkage_reflection_ = NULL;
const ::google::protobuf::Descriptor* SolvationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SolvationInfo_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* SolvationInfo_Shape_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_proto_2fBuildInfoPB_2eproto() {
  protobuf_AddDesc_proto_2fBuildInfoPB_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "proto/BuildInfoPB.proto");
  GOOGLE_CHECK(file != NULL);
  BuildInfo_descriptor_ = file->message_type(0);
  static const int BuildInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, glycan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, linkage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, solvation_info_),
  };
  BuildInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildInfo_descriptor_,
      BuildInfo::default_instance_,
      BuildInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildInfo));
  BuildInfo_Linkage_descriptor_ = BuildInfo_descriptor_->nested_type(0);
  static const int BuildInfo_Linkage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo_Linkage, phi_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo_Linkage, psi_value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo_Linkage, omega_value_),
  };
  BuildInfo_Linkage_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuildInfo_Linkage_descriptor_,
      BuildInfo_Linkage::default_instance_,
      BuildInfo_Linkage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo_Linkage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuildInfo_Linkage, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuildInfo_Linkage));
  SolvationInfo_descriptor_ = file->message_type(1);
  static const int SolvationInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolvationInfo, shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolvationInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolvationInfo, closeness_),
  };
  SolvationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SolvationInfo_descriptor_,
      SolvationInfo::default_instance_,
      SolvationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolvationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SolvationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SolvationInfo));
  SolvationInfo_Shape_descriptor_ = SolvationInfo_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_proto_2fBuildInfoPB_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildInfo_descriptor_, &BuildInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuildInfo_Linkage_descriptor_, &BuildInfo_Linkage::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SolvationInfo_descriptor_, &SolvationInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_proto_2fBuildInfoPB_2eproto() {
  delete BuildInfo::default_instance_;
  delete BuildInfo_reflection_;
  delete BuildInfo_Linkage::default_instance_;
  delete BuildInfo_Linkage_reflection_;
  delete SolvationInfo::default_instance_;
  delete SolvationInfo_reflection_;
}

void protobuf_AddDesc_proto_2fBuildInfoPB_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027proto/BuildInfoPB.proto\022*molecular_dyn"
    "amics.oligosaccharide_builder\"\204\002\n\tBuildI"
    "nfo\022\016\n\006glycan\030\001 \002(\t\022N\n\007linkage\030\002 \003(\0132=.m"
    "olecular_dynamics.oligosaccharide_builde"
    "r.BuildInfo.Linkage\022Q\n\016solvation_info\030\003 "
    "\001(\01329.molecular_dynamics.oligosaccharide"
    "_builder.SolvationInfo\032D\n\007Linkage\022\021\n\tphi"
    "_value\030\001 \003(\001\022\021\n\tpsi_value\030\002 \003(\001\022\023\n\013omega"
    "_value\030\003 \003(\001\"\260\001\n\rSolvationInfo\022U\n\005shape\030"
    "\001 \002(\0162\?.molecular_dynamics.oligosacchari"
    "de_builder.SolvationInfo.Shape:\005CUBIC\022\020\n"
    "\010distance\030\002 \002(\001\022\021\n\tcloseness\030\003 \002(\001\"#\n\005Sh"
    "ape\022\t\n\005CUBIC\020\000\022\017\n\013RECTANGULAR\020\001", 511);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "proto/BuildInfoPB.proto", &protobuf_RegisterTypes);
  BuildInfo::default_instance_ = new BuildInfo();
  BuildInfo_Linkage::default_instance_ = new BuildInfo_Linkage();
  SolvationInfo::default_instance_ = new SolvationInfo();
  BuildInfo::default_instance_->InitAsDefaultInstance();
  BuildInfo_Linkage::default_instance_->InitAsDefaultInstance();
  SolvationInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_proto_2fBuildInfoPB_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_proto_2fBuildInfoPB_2eproto {
  StaticDescriptorInitializer_proto_2fBuildInfoPB_2eproto() {
    protobuf_AddDesc_proto_2fBuildInfoPB_2eproto();
  }
} static_descriptor_initializer_proto_2fBuildInfoPB_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BuildInfo_Linkage::kPhiValueFieldNumber;
const int BuildInfo_Linkage::kPsiValueFieldNumber;
const int BuildInfo_Linkage::kOmegaValueFieldNumber;
#endif  // !_MSC_VER

BuildInfo_Linkage::BuildInfo_Linkage()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildInfo_Linkage::InitAsDefaultInstance() {
}

BuildInfo_Linkage::BuildInfo_Linkage(const BuildInfo_Linkage& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildInfo_Linkage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildInfo_Linkage::~BuildInfo_Linkage() {
  SharedDtor();
}

void BuildInfo_Linkage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuildInfo_Linkage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildInfo_Linkage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildInfo_Linkage_descriptor_;
}

const BuildInfo_Linkage& BuildInfo_Linkage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fBuildInfoPB_2eproto();  return *default_instance_;
}

BuildInfo_Linkage* BuildInfo_Linkage::default_instance_ = NULL;

BuildInfo_Linkage* BuildInfo_Linkage::New() const {
  return new BuildInfo_Linkage;
}

void BuildInfo_Linkage::Clear() {
  phi_value_.Clear();
  psi_value_.Clear();
  omega_value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildInfo_Linkage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double phi_value = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_phi_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 9, input, this->mutable_phi_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_phi_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(9)) goto parse_phi_value;
        if (input->ExpectTag(17)) goto parse_psi_value;
        break;
      }
      
      // repeated double psi_value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_psi_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 17, input, this->mutable_psi_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_psi_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_psi_value;
        if (input->ExpectTag(25)) goto parse_omega_value;
        break;
      }
      
      // repeated double omega_value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_omega_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 25, input, this->mutable_omega_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_omega_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_omega_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildInfo_Linkage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double phi_value = 1;
  for (int i = 0; i < this->phi_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      1, this->phi_value(i), output);
  }
  
  // repeated double psi_value = 2;
  for (int i = 0; i < this->psi_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      2, this->psi_value(i), output);
  }
  
  // repeated double omega_value = 3;
  for (int i = 0; i < this->omega_value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(
      3, this->omega_value(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildInfo_Linkage::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double phi_value = 1;
  for (int i = 0; i < this->phi_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(1, this->phi_value(i), target);
  }
  
  // repeated double psi_value = 2;
  for (int i = 0; i < this->psi_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(2, this->psi_value(i), target);
  }
  
  // repeated double omega_value = 3;
  for (int i = 0; i < this->omega_value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleToArray(3, this->omega_value(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildInfo_Linkage::ByteSize() const {
  int total_size = 0;
  
  // repeated double phi_value = 1;
  {
    int data_size = 0;
    data_size = 8 * this->phi_value_size();
    total_size += 1 * this->phi_value_size() + data_size;
  }
  
  // repeated double psi_value = 2;
  {
    int data_size = 0;
    data_size = 8 * this->psi_value_size();
    total_size += 1 * this->psi_value_size() + data_size;
  }
  
  // repeated double omega_value = 3;
  {
    int data_size = 0;
    data_size = 8 * this->omega_value_size();
    total_size += 1 * this->omega_value_size() + data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildInfo_Linkage::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildInfo_Linkage* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildInfo_Linkage*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildInfo_Linkage::MergeFrom(const BuildInfo_Linkage& from) {
  GOOGLE_CHECK_NE(&from, this);
  phi_value_.MergeFrom(from.phi_value_);
  psi_value_.MergeFrom(from.psi_value_);
  omega_value_.MergeFrom(from.omega_value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildInfo_Linkage::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildInfo_Linkage::CopyFrom(const BuildInfo_Linkage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildInfo_Linkage::IsInitialized() const {
  
  return true;
}

void BuildInfo_Linkage::Swap(BuildInfo_Linkage* other) {
  if (other != this) {
    phi_value_.Swap(&other->phi_value_);
    psi_value_.Swap(&other->psi_value_);
    omega_value_.Swap(&other->omega_value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildInfo_Linkage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildInfo_Linkage_descriptor_;
  metadata.reflection = BuildInfo_Linkage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int BuildInfo::kGlycanFieldNumber;
const int BuildInfo::kLinkageFieldNumber;
const int BuildInfo::kSolvationInfoFieldNumber;
#endif  // !_MSC_VER

BuildInfo::BuildInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuildInfo::InitAsDefaultInstance() {
  solvation_info_ = const_cast< ::molecular_dynamics::oligosaccharide_builder::SolvationInfo*>(&::molecular_dynamics::oligosaccharide_builder::SolvationInfo::default_instance());
}

BuildInfo::BuildInfo(const BuildInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuildInfo::SharedCtor() {
  _cached_size_ = 0;
  glycan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  solvation_info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuildInfo::~BuildInfo() {
  SharedDtor();
}

void BuildInfo::SharedDtor() {
  if (glycan_ != &::google::protobuf::internal::kEmptyString) {
    delete glycan_;
  }
  if (this != default_instance_) {
    delete solvation_info_;
  }
}

void BuildInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuildInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuildInfo_descriptor_;
}

const BuildInfo& BuildInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fBuildInfoPB_2eproto();  return *default_instance_;
}

BuildInfo* BuildInfo::default_instance_ = NULL;

BuildInfo* BuildInfo::New() const {
  return new BuildInfo;
}

void BuildInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_glycan()) {
      if (glycan_ != &::google::protobuf::internal::kEmptyString) {
        glycan_->clear();
      }
    }
    if (has_solvation_info()) {
      if (solvation_info_ != NULL) solvation_info_->::molecular_dynamics::oligosaccharide_builder::SolvationInfo::Clear();
    }
  }
  linkage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuildInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string glycan = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_glycan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->glycan().data(), this->glycan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_linkage;
        break;
      }
      
      // repeated .molecular_dynamics.oligosaccharide_builder.BuildInfo.Linkage linkage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_linkage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_linkage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_linkage;
        if (input->ExpectTag(26)) goto parse_solvation_info;
        break;
      }
      
      // optional .molecular_dynamics.oligosaccharide_builder.SolvationInfo solvation_info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_solvation_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_solvation_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuildInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string glycan = 1;
  if (has_glycan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glycan().data(), this->glycan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->glycan(), output);
  }
  
  // repeated .molecular_dynamics.oligosaccharide_builder.BuildInfo.Linkage linkage = 2;
  for (int i = 0; i < this->linkage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->linkage(i), output);
  }
  
  // optional .molecular_dynamics.oligosaccharide_builder.SolvationInfo solvation_info = 3;
  if (has_solvation_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->solvation_info(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuildInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string glycan = 1;
  if (has_glycan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->glycan().data(), this->glycan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->glycan(), target);
  }
  
  // repeated .molecular_dynamics.oligosaccharide_builder.BuildInfo.Linkage linkage = 2;
  for (int i = 0; i < this->linkage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->linkage(i), target);
  }
  
  // optional .molecular_dynamics.oligosaccharide_builder.SolvationInfo solvation_info = 3;
  if (has_solvation_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->solvation_info(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuildInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string glycan = 1;
    if (has_glycan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->glycan());
    }
    
    // optional .molecular_dynamics.oligosaccharide_builder.SolvationInfo solvation_info = 3;
    if (has_solvation_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->solvation_info());
    }
    
  }
  // repeated .molecular_dynamics.oligosaccharide_builder.BuildInfo.Linkage linkage = 2;
  total_size += 1 * this->linkage_size();
  for (int i = 0; i < this->linkage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->linkage(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuildInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuildInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuildInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuildInfo::MergeFrom(const BuildInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  linkage_.MergeFrom(from.linkage_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_glycan()) {
      set_glycan(from.glycan());
    }
    if (from.has_solvation_info()) {
      mutable_solvation_info()->::molecular_dynamics::oligosaccharide_builder::SolvationInfo::MergeFrom(from.solvation_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuildInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuildInfo::CopyFrom(const BuildInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuildInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  
  if (has_solvation_info()) {
    if (!this->solvation_info().IsInitialized()) return false;
  }
  return true;
}

void BuildInfo::Swap(BuildInfo* other) {
  if (other != this) {
    std::swap(glycan_, other->glycan_);
    linkage_.Swap(&other->linkage_);
    std::swap(solvation_info_, other->solvation_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuildInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuildInfo_descriptor_;
  metadata.reflection = BuildInfo_reflection_;
  return metadata;
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* SolvationInfo_Shape_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolvationInfo_Shape_descriptor_;
}
bool SolvationInfo_Shape_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const SolvationInfo_Shape SolvationInfo::CUBIC;
const SolvationInfo_Shape SolvationInfo::RECTANGULAR;
const SolvationInfo_Shape SolvationInfo::Shape_MIN;
const SolvationInfo_Shape SolvationInfo::Shape_MAX;
const int SolvationInfo::Shape_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int SolvationInfo::kShapeFieldNumber;
const int SolvationInfo::kDistanceFieldNumber;
const int SolvationInfo::kClosenessFieldNumber;
#endif  // !_MSC_VER

SolvationInfo::SolvationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SolvationInfo::InitAsDefaultInstance() {
}

SolvationInfo::SolvationInfo(const SolvationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SolvationInfo::SharedCtor() {
  _cached_size_ = 0;
  shape_ = 0;
  distance_ = 0;
  closeness_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SolvationInfo::~SolvationInfo() {
  SharedDtor();
}

void SolvationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SolvationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SolvationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SolvationInfo_descriptor_;
}

const SolvationInfo& SolvationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_proto_2fBuildInfoPB_2eproto();  return *default_instance_;
}

SolvationInfo* SolvationInfo::default_instance_ = NULL;

SolvationInfo* SolvationInfo::New() const {
  return new SolvationInfo;
}

void SolvationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    shape_ = 0;
    distance_ = 0;
    closeness_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SolvationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .molecular_dynamics.oligosaccharide_builder.SolvationInfo.Shape shape = 1 [default = CUBIC];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::molecular_dynamics::oligosaccharide_builder::SolvationInfo_Shape_IsValid(value)) {
            set_shape(static_cast< ::molecular_dynamics::oligosaccharide_builder::SolvationInfo_Shape >(value));
          } else {
            mutable_unknown_fields()->AddVarint(1, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_distance;
        break;
      }
      
      // required double distance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_closeness;
        break;
      }
      
      // required double closeness = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_closeness:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &closeness_)));
          set_has_closeness();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SolvationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .molecular_dynamics.oligosaccharide_builder.SolvationInfo.Shape shape = 1 [default = CUBIC];
  if (has_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->shape(), output);
  }
  
  // required double distance = 2;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->distance(), output);
  }
  
  // required double closeness = 3;
  if (has_closeness()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->closeness(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SolvationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .molecular_dynamics.oligosaccharide_builder.SolvationInfo.Shape shape = 1 [default = CUBIC];
  if (has_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      1, this->shape(), target);
  }
  
  // required double distance = 2;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->distance(), target);
  }
  
  // required double closeness = 3;
  if (has_closeness()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->closeness(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SolvationInfo::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .molecular_dynamics.oligosaccharide_builder.SolvationInfo.Shape shape = 1 [default = CUBIC];
    if (has_shape()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->shape());
    }
    
    // required double distance = 2;
    if (has_distance()) {
      total_size += 1 + 8;
    }
    
    // required double closeness = 3;
    if (has_closeness()) {
      total_size += 1 + 8;
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SolvationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SolvationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SolvationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SolvationInfo::MergeFrom(const SolvationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_shape()) {
      set_shape(from.shape());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_closeness()) {
      set_closeness(from.closeness());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SolvationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SolvationInfo::CopyFrom(const SolvationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SolvationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;
  
  return true;
}

void SolvationInfo::Swap(SolvationInfo* other) {
  if (other != this) {
    std::swap(shape_, other->shape_);
    std::swap(distance_, other->distance_);
    std::swap(closeness_, other->closeness_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SolvationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SolvationInfo_descriptor_;
  metadata.reflection = SolvationInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace oligosaccharide_builder
}  // namespace molecular_dynamics

// @@protoc_insertion_point(global_scope)
